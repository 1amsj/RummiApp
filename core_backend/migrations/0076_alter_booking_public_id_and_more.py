# Generated by Django 4.1.13 on 2025-03-12 18:43

from django.db import migrations, models


def fix_duplicate_public_ids(apps, schema_editor):
    Booking = apps.get_model('core_backend', 'Booking')
    seen = {}
    for booking in Booking.objects.all().order_by('id'):
        if booking.public_id in seen:
            # Si ya existe, se añade un sufijo único
            booking.public_id = f"{booking.public_id}-{booking.id}"
            booking.save()
        else:
            seen[booking.public_id] = booking.id

def reverse_fix_duplicate_public_ids(apps, schema_editor):
    # No es necesario implementar la reversión
    pass

class Migration(migrations.Migration):

    dependencies = [
        ("core_backend", "0075_alter_contact_phone_alter_historicalcontact_phone"),
    ]

    operations = [
        migrations.RunPython(fix_duplicate_public_ids, reverse_fix_duplicate_public_ids),
        migrations.AlterField(
            model_name="booking",
            name="public_id",
            field=models.CharField(max_length=30, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="historicalbooking",
            name="public_id",
            field=models.CharField(db_index=True, max_length=30, null=True),
        ),
    ]
