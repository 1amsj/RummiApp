# Generated by Django 4.0.8 on 2023-03-13 16:22
import datetime

from django.contrib.contenttypes.models import ContentType
from django.db import migrations

import core_backend.models as app_models

# Hard-coded password hash to avoid plain text
DEFAULT_PASSWORD = "core_password"


def populate(apps, schema_editor):
    # Models
    Affiliation = apps.get_model('core_backend', 'Affiliation')
    Agent = apps.get_model('core_backend', 'Agent')
    Business = apps.get_model('core_backend', 'Business')
    Category = apps.get_model('core_backend', 'Category')
    Contact = apps.get_model('core_backend', 'Contact')
    Company = apps.get_model('core_backend', 'Company')
    Extra = apps.get_model('core_backend', 'Extra')
    Location = apps.get_model('core_backend', 'Location')
    Operator = apps.get_model('core_backend', 'Operator')
    Payer = apps.get_model('core_backend', 'Payer')
    Provider = apps.get_model('core_backend', 'Provider')
    Recipient = apps.get_model('core_backend', 'Recipient')
    Requester = apps.get_model('core_backend', 'Requester')
    Service = apps.get_model('core_backend', 'Service')
    User = apps.get_model('core_backend', 'User')

    """
        HELPERS
    """
    def update_extras(business, model, instance, fields: dict):
        ct = ContentType.objects.get_for_model(model)
        for (k, v) in fields.items():
            Extra.objects.update_or_create(
                business=business,
                parent_ct_id=ct.id,
                parent_id=instance.id,
                key=k,
                defaults={
                    'value': v,
                }
            )

    def create_user(**fields):
        user = User.objects.create(**fields)
        user.contacts.add(
            Contact.objects.create(
                email=fields.get('email'),
            ),
        )
        Payer.objects.create(
            user=user,
            method='cash',
        )
        user_recipient = Recipient.objects.create(
            user=user,
        )
        Affiliation.objects.create(
            recipient=user_recipient,
            company=None,
        )
        return user

    """
        BUSINESS
    """
    interpretation_business = Business.objects.create(
        name="interpretation"
    )

    """
        CATEGORIES
    """
    # Appointment
    category_onsite = Category.objects.create(
        description="Onsite",
        name="appointment-onsite",
    )
    category_telephonic = Category.objects.create(
        description="Telephonic",
        name="appointment-telephonic",
    )
    category_videocall = Category.objects.create(
        description="Video call",
        name="appointment-videocall",
    )

    # Certification
    category_medlegal_certified = Category.objects.create(
        description="Med-legal certified",
        name="certification-medlegal",
    )
    category_no_certification = Category.objects.create(
        description="Not certified",
        name="certification-none",
    )
    category_standard_certification = Category.objects.create(
        description="Non-med-legal-standard certified",
        name="certification-standard",
    )

    """
        COMPANIES
    """
    company_core = Company.objects.create(
        name="CORE Communications",
        type="owner",
        send_method="email",
        on_hold=False,
    )
    company_core.contacts.add(
        Contact.objects.create(
            email="example@core.com",
        )
    )
    company_core.locations.add(
        Location.objects.create(
            address="Some address",
            city="Some city",
            state="Some state",
            country="Some country",
            zip="1000",
        )
    )

    insurance_company = Company.objects.create(
        name="Smily-face Insurance",
        type="insurance",
        send_method="email",
        on_hold=False,
    )
    insurance_company.contacts.add(
        Contact.objects.create(
            email="smily.face@insurance.com",
        )
    )

    clinic_company = Company.objects.create(
        name="Clinic Happiness",
        type="clinic",
        send_method="email",
        on_hold=False,
    )
    clinic_company.contacts.add(
        Contact.objects.create(
            phone="+54 9 813 5250",
        ),
    )
    clinic_company.locations.add(
        Location.objects.create(
            address="Clinicaddress",
            city="Cliniccity",
            state="Clinicstate",
            country="Cliniccountry",
            zip="1001",
        )
    )

    """
        USERS
    """
    # Admin
    admin_user = User.objects.create_superuser(
        username="core_admin",
        email="admin@core.com",
        password=DEFAULT_PASSWORD,
        date_of_birth=datetime.date(1990, 1, 1),
        first_name="Admin",
        last_name="CORE",
        national_id="",
        ssn="",
    )
    admin_user.contacts.add(
        Contact.objects.create(
            email="admin@core.com",
        ),
    )
    Operator.objects.create(
        user=admin_user,
        hiring_date=datetime.date.today(),
    )

    # Fulano, ordinary patient
    fulano_user = create_user(
        username="fulanito",
        email="fulanito@example.com",
        date_of_birth=datetime.date(1998, 9, 17),
        first_name="Fulano",
        last_name="D'Tal",
        national_id="123",
        ssn="123456",
    )
    fulano_user.contacts.add(
        Contact.objects.create(
            email="fulanito.othermail@example.com",
        ),
    )

    Affiliation.objects.create(
        recipient=fulano_user.as_recipient,
        company=insurance_company,
    )

    # Maxi, ordinary patient
    maxi_user = create_user(
        username="maxi",
        email="maxi@example.com",
        date_of_birth=datetime.date(2001, 2, 21),
        first_name="Maxinombre",
        last_name="Maxiapellido",
        national_id="136",
        ssn="1834561",
    )
    Affiliation.objects.create(
        recipient=maxi_user.as_recipient,
        company=insurance_company,
    )

    # Stephany, operator
    stephany_user = create_user(
        username="stephany",
        email="stephany@example.com",
        date_of_birth=datetime.date(1999, 11, 10),
        first_name="Stephany",
        last_name="Perez",
        national_id="190",
        ssn="7294567",
    )
    Operator.objects.create(
        user=stephany_user,
        hiring_date=datetime.date(2022, 8, 17),
    )

    # Mario, doctor & medical provider
    mario_user = create_user(
        username="mario",
        email="mario@example.com",
        date_of_birth=datetime.date(1980, 1, 30),
        first_name="Mario",
        last_name="Verde",
        national_id="678",
        ssn="7931753",
    )

    Agent.objects.create(
        user=mario_user,
        role="doctor",
    ) \
        .companies.add(clinic_company)

    Agent.objects.create(
        user=mario_user,
        role="medicalprovider",
    ) \
        .companies.add(clinic_company)

    Requester.objects.create(
        user=mario_user,
    ) \
        .companies.add(clinic_company)

    # Mayka, provider (interpreter)
    mayka_user = create_user(
        username="mayka",
        email="mayka@example.com",
        date_of_birth=datetime.date(2002, 12, 13),
        first_name="Mayka",
        last_name="Malbela",
        national_id="468",
        ssn="753951",
    )

    Provider.objects.create(
        user=mayka_user,
    )

    # Santiago, provider (interpreter)
    santiago_user = create_user(
        username="santiago",
        email="santiago@example.com",
        date_of_birth=datetime.date(1996, 2, 29),
        first_name="Santiago",
        last_name="Ñandú",
        national_id="951",
        ssn="852456",
    )

    Provider.objects.create(
        user=santiago_user,
    )

    """
        Services
    """
    # Mayka
    service_mayka1 = Service.objects.create(
        business=interpretation_business,
        provider=mayka_user.as_provider,
        bill_amount=5,
        bill_rate=60,
    )
    service_mayka1.categories.add(category_telephonic, category_medlegal_certified)
    update_extras(
        business=interpretation_business,
        model=app_models.Service,
        instance=service_mayka1,
        fields={
            "source_language": "en",
            "target_language": "es",
        },
    )

    service_mayka2 = Service.objects.create(
        business=interpretation_business,
        provider=mayka_user.as_provider,
        bill_amount=7,
        bill_rate=60,
    )
    service_mayka2.categories.add(category_videocall, category_no_certification)
    update_extras(
        business=interpretation_business,
        model=app_models.Service,
        instance=service_mayka2,
        fields={
            "source_language": "en",
            "target_language": "es",
        },
    )

    # Santiago
    service_santiago1 = Service.objects.create(
        business=interpretation_business,
        provider=santiago_user.as_provider,
        bill_amount=12,
        bill_rate=60,
    )
    service_santiago1.categories.add(category_onsite, category_standard_certification, category_no_certification)
    update_extras(
        business=interpretation_business,
        model=app_models.Service,
        instance=service_santiago1,
        fields={
            "source_language": "en",
            "target_language": "fr",
        },
    )

    service_santiago2 = Service.objects.create(
        business=interpretation_business,
        provider=santiago_user.as_provider,
        bill_amount=11,
        bill_rate=60,
    )
    service_santiago2.categories.add(category_onsite, category_standard_certification, category_no_certification)
    update_extras(
        business=interpretation_business,
        model=app_models.Service,
        instance=service_santiago2,
        fields={
            "source_language": "en",
            "target_language": "es",
        },
    )



class Migration(migrations.Migration):

    dependencies = [
        ('core_backend', '0019_booking_created_at_historicalbooking_created_at'),
    ]

    operations = [
        migrations.RunPython(populate, migrations.RunPython.noop),
    ]
