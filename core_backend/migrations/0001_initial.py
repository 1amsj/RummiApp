# Generated by Django 4.0.5 on 2022-10-05 14:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('national_id', models.CharField(blank=True, max_length=50, verbose_name='national ID')),
                ('ssn', models.CharField(blank=True, max_length=50, verbose_name='social security number')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=64, verbose_name='role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='as_agents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'agent',
                'verbose_name_plural': 'agents',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'booking',
                'verbose_name_plural': 'bookings',
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='business')),
            ],
            options={
                'verbose_name': 'business',
                'verbose_name_plural': 'businesses',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, verbose_name='phone number')),
                ('fax', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, verbose_name='fax number')),
            ],
            options={
                'verbose_name': 'contact',
                'verbose_name_plural': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_url', models.URLField(blank=True, null=True, verbose_name='meeting URL')),
                ('start_at', models.DateTimeField(verbose_name='start date and time')),
                ('end_at', models.DateTimeField(verbose_name='end date and time')),
                ('observations', models.CharField(blank=True, max_length=256, verbose_name='observations')),
                ('agents', models.ManyToManyField(related_name='events', to='core_backend.agent')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core_backend.booking')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'invoice',
                'verbose_name_plural': 'invoices',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=128, verbose_name='address')),
                ('city', models.CharField(blank=True, max_length=128, verbose_name='city')),
                ('state', models.CharField(blank=True, max_length=128, verbose_name='state or province')),
                ('country', models.CharField(blank=True, max_length=128, verbose_name='country')),
                ('zip', models.CharField(blank=True, max_length=10, verbose_name='ZIP code')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='as_provider', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'provider data',
                'verbose_name_plural': 'provider data',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'rule',
                'verbose_name_plural': 'rules',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='core_backend.business')),
                ('categories', models.ManyToManyField(related_name='services', to='core_backend.category')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='core_backend.provider')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
            },
        ),
        migrations.CreateModel(
            name='Requester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='as_requester', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'requester data',
                'verbose_name_plural': 'requester data',
            },
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='as_recipient', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'recipient data',
                'verbose_name_plural': 'recipient data',
            },
        ),
        migrations.CreateModel(
            name='Payer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(max_length=64, verbose_name='paying method')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='as_payer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'payer data',
                'verbose_name_plural': 'payer data',
            },
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hiring_date', models.DateField(verbose_name='hiring date')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='as_operator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'operator data',
                'verbose_name_plural': 'operator data',
            },
        ),
        migrations.CreateModel(
            name='Ledger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ledgers', to='core_backend.booking')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ledgers', to='core_backend.event')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ledgers', to='core_backend.invoice')),
            ],
            options={
                'verbose_name': 'ledger',
                'verbose_name_plural': 'ledgers',
            },
        ),
        migrations.CreateModel(
            name='Extra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_id', models.PositiveIntegerField()),
                ('key', models.CharField(max_length=256, verbose_name='key')),
                ('value', models.CharField(max_length=512, verbose_name='value')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_backend.business')),
                ('parent_ct', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'extra data',
                'verbose_name_plural': 'extra data',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='core_backend.location'),
        ),
        migrations.AddField(
            model_name='event',
            name='payer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='core_backend.payer'),
        ),
        migrations.AddField(
            model_name='event',
            name='recipients',
            field=models.ManyToManyField(related_name='events', to='core_backend.recipient'),
        ),
        migrations.AddField(
            model_name='event',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='core_backend.requester'),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('type', models.CharField(max_length=128, verbose_name='type')),
                ('send_method', models.CharField(max_length=128, verbose_name='send method')),
                ('on_hold', models.BooleanField(verbose_name='on hold')),
                ('contact', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_backend.contact')),
                ('location', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner', to='core_backend.location')),
            ],
            options={
                'verbose_name': 'company',
                'verbose_name_plural': 'companies',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='categories',
            field=models.ManyToManyField(related_name='bookings', to='core_backend.category'),
        ),
        migrations.AddField(
            model_name='booking',
            name='operators',
            field=models.ManyToManyField(related_name='bookings', to='core_backend.operator'),
        ),
        migrations.AddField(
            model_name='booking',
            name='services',
            field=models.ManyToManyField(related_name='bookings', to='core_backend.service'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='core_backend.company'),
        ),
        migrations.AddField(
            model_name='user',
            name='contact',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_backend.contact'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='extra',
            index=models.Index(fields=['parent_ct', 'business', 'key'], name='core_backen_parent__a74b82_idx'),
        ),
        migrations.AddIndex(
            model_name='extra',
            index=models.Index(fields=['parent_id', 'key'], name='core_backen_parent__9f302a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='extra',
            unique_together={('parent_ct', 'parent_id', 'business', 'key')},
        ),
        migrations.AlterUniqueTogether(
            name='agent',
            unique_together={('user', 'role')},
        ),
    ]
